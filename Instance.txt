resource "aws_instance" "DevOps-WebServer1" {
 
  instance_type = "t2.micro"

  # Lookup the correct AMI based on the region
  # we specified
  ami = var.aws_amis[var.aws_region]
  tags = {
    Name = "DevOps-WebServer1"
  }
  # The name of our SSH keypair we created above.
  key_name = var.key_name

  # Our Security group to allow HTTP and SSH access
  vpc_security_group_ids = [aws_security_group.DevOps-EC2-SG.id]

  # We're going to launch into the PUBLIC subnet 
  subnet_id = "${element(aws_subnet.public-subnets.*.ids, count.index)}"

  # The connection block tells our provisioner how to
  # communicate with the resource (instance)
  connection {
    # The default username for our AMI
    user = "ubuntu"
    host = "${self.public_ip}"
    # The connection will use the local SSH agent for authentication.
  }

  provisioner "remote-exec" {
    inline = [
      "sudo apt-get -y update",
      "sudo apt-get -y install nginx",
      "sudo service nginx start",
    ]
  }

}

resource "aws_instance" "DevOps-WebServer2" {
   
  instance_type = "t2.micro"

  # Lookup the correct AMI based on the region
  # we specified
  ami = var.aws_amis[var.aws_region]
  tags = {
    Name = "DevOps-WebServer2"
  }
  # The name of our SSH keypair we created above.
  key_name = var.key_name

  # Our Security group to allow HTTP and SSH access
  vpc_security_group_ids = [aws_security_group.DevOps-EC2-SG.id]

  # We're going to launch into the PUBLIC subnet
  subnet_id = "${element(aws_subnet.public-subnets.*.ids, count.index)}"

  # The connection block tells our provisioner how to
  # communicate with the resource (instance)
  connection {
    # The default username for our AMI
    user = "ubuntu"
    host = "${self.public_ip}"
    # The connection will use the local SSH agent for authentication.
  }

  provisioner "remote-exec" {
    inline = [
      "sudo apt-get -y update",
      "sudo apt-get -y install apache2",
      "sudo service apache2 start",
    ]
  }

}
  
resource "aws_instance" "DevOps-AppServer1" {
  # The connection block tells our provisioner how to
  # communicate with the resource (instance)
  # The connection block tells our provisioner how to
  # communicate with the resource (instance)
  count = "${length(var.private_subnets_cidr)}"
  instance_type = "t2.micro"

  # Lookup the correct AMI based on the region
  # we specified
  ami = var.aws_amis[var.aws_region]
  tags = {
    Name = "DevopsAppServer${count.index + 1}"
  }
  # The name of our SSH keypair we created above.
  key_name = var.key_name

  # Our Security group to allow HTTP and SSH access
  vpc_security_group_ids = [aws_security_group.DevOps-EC2-SG.id]

  # We're going to launch into the PRIVATE subnet of Availability Zone-A. 
  subnet_id = "${element(aws_subnet.private-subnets.*.ids, count.index)}"

}


