# Create a VPC to launch our instances into
resource "aws_vpc" "DevOps-VPC" {
  cidr_block = "${var.vpc_cidr}"
  tags = {
    Name = "DevOps-VPC"
  }
}

#Create Two Public Subnets in Different availability zones
resource "aws_subnet" "public-subnet" {
  vpc_id            = "${aws_vpc.DevOps-VPC.id}"
  count = "${length(var.public_subnets_cidr)}"
  cidr_block = "${element(var.public_subnets_cidr,count.index)}"
  availability_zone = "${element(var.azs,count.index)}"
  tags = {
    Name = "DevOps-Public-Subnet"
  }
}

#Create Two Private Subnets in Different availability zones
resource "aws_subnet" "private-subnet" {
  vpc_id            = "${aws_vpc.DevOps-VPC.id}"
  count = "${length(var.private_subnets_cidr)}"
  cidr_block = "${element(var.private_subnets_cidr,count.index)}"
  availability_zone = "${element(var.azs,count.index)}"
  tags = {
    Name = "DevOps-Private-Subnet"
  }
}

# Create an internet gateway to give our subnet access to the outside world
resource "aws_internet_gateway" "DevOps-IGW" {
  vpc_id = "${aws_vpc.DevOps-VPC.id}"
  tags = {
    Name = "DevOps-IGW"
  }
}

# Grant the VPC internet access on its main route table
resource "aws_route" "DevOps-Public-RT" {
  route_table_id         = "${aws_vpc.DevOps-VPC.main_route_table_id}"
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = "${aws_internet_gateway.DevOps-IGW.id}"
  tags = {
    Name = "DevOps-Public-RT"
  }
}

#
resource "aws_route" "DevOps-Private-RT" {
  route_table_id         = "${aws_vpc.DevOps-VPC.route_table_id}"
  destination_cidr_block = "0.0.0.0/0"
  nat_gateway_id             = "${aws_nat_gateway.DevOps-NatGW.id}"
  tags = {
    Name = "DevOps-Private-RT"
  }
}

#Assocoaite the Public Subnets to the Pubilc Route Table
resource "aws_route_table_association" "a" {
  count = "${length(var.public_subnets_cidr)}"
  subnet_id      = "${element(aws_subnet.public-subnet.*.id,count.index)}"
  route_table_id = "${aws_route_table.DevOps-Public-RT.id}"
}

resource "aws_route_table_association" "b" {
  count = "${length(var.private_subnets_cidr)}"
  subnet_id      = "${element(aws_subnet.private-subnet.*.id,count.index)}"
  route_table_id = "${aws_route_table.DevOps-Public-RT.id}"
}

# A security group for the ELB so it is accessible via the web
resource "aws_security_group" "DevOps-ELB-SG" {
  name        = "terraform_example_elb"
  description = "Used in the terraform"
  vpc_id      = "${aws_vpc.DevOps-VPC.id}"
  tags = {
    Name = "DevOps-ELB-SG"
  }

  # HTTP access from anywhere
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # outbound internet access
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Our default security group to access
# the instances over SSH and HTTP
resource "aws_security_group" "DevOps-EC2-SG" {
  name        = "terraform_example"
  description = "Used in the terraform"
  vpc_id      = "${aws_vpc.DevOps-VPC.id}"
  tags = {
    Name = "DevOps-EC2-SG"
  }

  # SSH access from anywhere
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # HTTP access from the VPC
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # HTTP access from the VPC
  ingress {
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # outbound internet access
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}